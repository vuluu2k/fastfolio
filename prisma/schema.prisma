// Prisma schema for PostgreSQL with NextAuth-compatible models
// Docs: https://www.prisma.io/docs and https://next-auth.js.org/adapters/prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Relations
  accounts Account[]
  sessions Session[]

  // App-specific fields (optional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repo {
  id                  Int      @id
  userId              String
  name                String
  description         String
  website             String
  image_public_id     String
  private             Boolean
  visibility          String
  topics              String[]
  language            String
  size                Int
  website_title       String?
  website_description String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  pushed_at           DateTime
}
